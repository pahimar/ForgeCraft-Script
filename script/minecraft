#!/bin/bash
# /etc/init.d/minecraft
# version 0.3.2 2011-01-27 (YYYY-MM-DD)

### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Init script for linux Minecraft Server
### END INIT INFO

###### CONFIGURATION SETTINGS ######

# Username of the account to use
USERNAME="<username>"

# JMX Settings
JMXPORT="<jmx port>"
JMXPWFILE="<path to jmx password file>"
JMX_OPTIONS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=$JMXPORT -Dcom.sun.management.jmxremote.password.file=$JMXPWFILE"

# Service to launch
SERVICE='forge_latest.zip'

# Path to the Minecraft Directory
MCPATH="/home/${USERNAME}/minecraft"

# Path to the Backup Directory
BACKUPPATH="/home/${USERNAME}/backup"

# Path to the Check Server Executable
CHECKSERVER="/home/${USERNAME}/CheckServer"

# Path to the Crash Log Directory
CRASHLOG_DB_PATH='<path to dump crash logs>'

# Path to Java
JAVA_HOME="/usr/local/lib/jrockit"

# Memory Options
MEMINIT="8G"
MEMMAX="8G"

# Default Java Options
JAVA_OPTIONS="-XX:FlightRecorderOptions=defaultrecording=true,disk=true,repository=/home/$USERNAME/jfr/,maxage=30m,settings=profile"

# Backup Settings
BACKUPARCHIVEPATH=$BACKUPPATH/archive
BACKUPDIR=$(date +%b_%Y)

###### END CONFIGURATION SETTINGS ######

INVOCATION="${JAVA_HOME}/bin/java -Xmx${MEMMAX} -Xms${MEMINIT} ${JAVA_OPTIONS} ${JMX_OPTIONS} -jar $SERVICE nogui"
PORT=$(grep server-port $MCPATH/server.properties | cut -d '=' -f 2)

if [ -z "$PORT" ]; then
	PORT=25565
fi

ME=`whoami`
as_user() {
	if [ $ME == $USERNAME ] ; then
		bash -c "$1"
	else
		su $USERNAME -s /bin/bash -c "$1"
	fi
}

is_running() {
	# Check to see if the Minecraft server screen session exists, return true if exists.
	pidfile=${MCPATH}/mc${PORT}.pid

	if [ -r "$pidfile" ]
	then
		pid=$(head -1 $pidfile)
		if ps ax | grep -v grep | grep ${pid} | grep "$mc${PORT}" > /dev/null
		then
			return 0
		else 
			if [ -z "$isInStop" ]
			then
				if [ -z "$roguePrinted" ]
				then
					roguePrinted=1
					echo "Rogue pidfile found!"
				fi
			fi
			return 1
		fi
	else
		if ps ax | grep -v grep | grep "mc{PORT} ${INVOCATION}" > /dev/null
		then
			echo "No pidfile found, but server's running."
			echo "Re-creating the pidfile."

			pid=$(ps ax | grep -v grep | grep "mc${PORT} ${INVOCATION}" | cut -f1 -d' ')
			check_permissions
			as_user "echo $pid > $pidfile"

			return 0
		else
			return 1
		fi
	fi
}

mc_start() {
	# Attempt to start the Minecraft server
	pidfile=${MCPATH}/mc${PORT}.pid
	check_permissions

	as_user "cd $MCPATH && screen -dmS mc$PORT $INVOCATION"
	as_user "screen -list | grep '\.$SCREEN' | cut -f1 -d'.' | tr -d -c 0-9 > $pidfile"

	#
	# Waiting for the server to start
	#
	seconds=0
	until is_running 
	do
		sleep 1
		seconds=$seconds+1
		if [[ $seconds -eq 5 ]]
		then
			echo "Still not running, waiting a while longer..."
		fi
		if [[ $seconds -ge 120 ]]
		then
			echo "Failed to start, aborting."
			exit 1
		fi
	done	
	echo "$SERVICE is running."
}

mc_startmonitor() {
        # Start monitor
	if [ -z $CHECKSERVER ]; then
		echo "started monitor"
		/usr/bin/daemon --name=minecraft_checkserver -- $JAVA_HOME/bin/java -cp $CHECKSERVER CheckServer localhost $PORT
	fi
}

mc_saveoff() {
        # Suspend minecraft from saving, to backup world data.
	if is_running; then
		echo "$SERVICE is running... suspending saves"
		mc_exec "say SERVER BACKUP STARTING. Server going readonly..."
		mc_exec "save-off"
		mc_exec "save-all"
		sync
		sleep 10
	else
		echo "$SERVICE was not running. Not suspending saves."
	fi
}

mc_saveon() {
        # Enable minecraft saving
	if is_running; then
		echo "$SERVICE is running... re-enabling saves"
		mc_exec "save-on"
		mc_exec "say SERVER BACKUP ENDED. Server going read-write..."
	else
		echo "$SERVICE was not running. Not resuming saves."
	fi
}

mc_kill() {
        # Kill minecraft process
	pid=$(cat $MCPATH/java.pid)

	echo "terminating process with pid $pid"
	kill $pid
	
	for (( i=0; i < 10; i++ )); do
		is_running || break
		sleep 1
	done

	if is_running; then
		echo "$SERVICE could not be terminated, killing..."
		kill -SIGKILL $pid
		echo "$SERVICE killed"
	else
		echo "$SERVICE terminated"
	fi
}

mc_stop() {
        # Stops the server
        if is_running; then
        	echo "$SERVICE is running... stopping."

		pidfile=${MCPATH}/mc${PORT}.pid
		mc_exec "say SERVER SHUTTING DOWN IN 10 SECONDS. Saving map..."
		mc_exec "save-all"
		sleep 10
		mc_exec "stop"
	
		seconds=0
		isInStop=1
		while is_running
		do
			sleep 1 
			seconds=$seconds+1
			if [[ $seconds -eq 10 ]]
			then
				echo "$SERVICE Still not shut down, waiting a while longer..."
			fi
			if [[ $seconds -ge 120 ]]
			then
				logger -t minecraft-init "Failed to shut down server, aborting."
				echo "$SERVICE failed to shutdown..."
				exit 1
			fi
		done
		as_user "rm $pidfile"
		unset isInStop
		
		if is_running; then
			echo "$SERVICE could not be shut down cleanly... still running."
			mc_kill
		else
			echo "$SERVICE is shut down."
		fi
		as_user "rm $pidfile"

	else
        	echo "$SERVICE was not running."
        fi
}

mc_stopmonitor() {
	if [ -z $CHECKSERVER ]; then
		/usr/bin/daemon --name=minecraft_checkserver --stop
	fi
}

mc_backup() {
	echo "Backing up minecraft world"

	[ -d "$BACKUPPATH/$BACKUPDIR" ] || mkdir -p "$BACKUPPATH/$BACKUPDIR"

	rdiff-backup $MCPATH "$BACKUPPATH/$BACKUPDIR"
	
	echo "Backup complete"
}

mc_thinoutbackup() {
	if (($(date +%H) == 0)) && (($(date +%M) < 15)); then
		archivedate=$(date --date="7 days ago")
		
		echo "Thinning backups created $archivedate out"
		
		archivedateunix=$(date --date="$archivedate" +%s)
		archivesourcedir=$BACKUPPATH/$(date --date="$archivedate" +%b_%Y)
		archivesource=$archivesourcedir/rdiff-backup-data/increments.$(date --date="$archivedate" +%Y-%m-%dT%H):0*.dir
		archivesource=$(echo $archivesource)
		archivedest=$BACKUPARCHIVEPATH/$(date --date="$archivedate" +%b_%Y)
		
		if [[ ! -f $archivesource ]]; then
			echo "Nothing to be done"
		else
			tempdir=$(mktemp -d)
			
			if [[ ! $tempdir =~ ^/tmp ]]; then
				echo "invalid tmp dir $tempdir"
			else
				rdiff-backup $archivesource $tempdir
				rdiff-backup --current-time $archivedateunix $tempdir $archivedest
				rm -R "$tempdir"
				
				rdiff-backup --remove-older-than 7D --force $archivesourcedir
				
				echo "done"
			fi
		fi
	fi
}

mc_exec() {
	if is_running; then
		as_user "screen -p 0 -S mc$PORT -X eval 'stuff \"$(eval echo $FORMAT)\"\015'"
	else
		echo "$SERVICE was not running. Not executing command."
	fi
}

mc_dumpcrashlogs() {
	if is_running; then
		cp $MCPATH/crash-reports/* $CRASHLOG_DB_PATH
		mv $MCPATH/crash-reports/* $MCPATH/crash-reports.archive/
	fi
}

function ask {
    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        # Ask the question
        read -p "$1 [$prompt] " REPLY

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}

#Start-Stop here
case "$1" in
  start)
    if mc_start
    then
      mc_startmonitor
    fi
    ;;
  stop)
    mc_stopmonitor
    mc_stop
    ;;
  restart)
    mc_stop
    mc_start
    ;;
  backup)
    mc_saveoff
    mc_backup
    mc_saveon
    mc_thinoutbackup
    ;;
  exec)
    shift
    mc_exec "$@"
    ;;
  console)
    # shows the mine craft console window
    if is_running; then
      echo "This command will load the screen that the server is running under"
      echo "To exit the screen press CTRL+A D"
      
      if ask "Do you wish to load the screen?" N; then
        as_user "script /dev/null -c 'screen -p 0 -S mc$PORT -dr'"
      fi
    else
      echo "$SERVICE not running."
    fi
    ;;
  dumpcrashlogs)
    mc_dumpcrashlogs
    ;;
  status)
    if is_running
    then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
    fi
    ;;

  *)
  echo "Usage: $(readlink -f $0) {start|stop|restart|backup|exec|dumpcrashlogs|status|console}"
  exit 1
  ;;
esac

exit 0
